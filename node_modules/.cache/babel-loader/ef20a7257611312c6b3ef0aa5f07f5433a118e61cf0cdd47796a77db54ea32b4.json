{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n  const API_BASE_URL = \"http://127.0.0.1:8000\";\n\n  // Function to fetch cluster statistics\n  async function fetchStats() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/stats`);\n      if (!response.ok) throw new Error(\"Failed to fetch statistics\");\n      const stats = await response.json();\n      let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n      for (const [game, count] of Object.entries(stats)) {\n        statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n      }\n      statsHtml += \"</ul>\";\n      statsContainer.innerHTML = statsHtml;\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      statsContainer.innerHTML = \"<p style='color: red;'>Error loading statistics.</p>\";\n    }\n  }\n\n  // Function to fetch and display cluster visualization\n  async function fetchClusterVisualization() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/visualize_clusters`);\n      if (!response.ok) throw new Error(\"Failed to load visualization\");\n      const blob = await response.blob();\n      const imageUrl = URL.createObjectURL(blob);\n      clusterVisualization.innerHTML = `\n              <h3>Updated Clusters:</h3>\n              <img src=\"${imageUrl}\" alt=\"Cluster Visualization\"\n              style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px; box-shadow: 0px 4px 6px rgba(0,0,0,0.2);\">`;\n    } catch (error) {\n      console.error(\"Error fetching cluster visualization:\", error);\n      clusterVisualization.innerHTML = \"<p style='color: red;'>Could not load cluster visualization.</p>\";\n    }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n    event.preventDefault();\n    if (!videoInput.files.length) {\n      alert(\"Please select a video file to upload.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"video\", videoInput.files[0]);\n    formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n    formData.append(\"game_name\", gameNameInput.value.trim());\n\n    // Reset UI elements\n    progressBar.style.width = \"0%\";\n    progressText.textContent = \"Uploading...\";\n    resultContainer.innerHTML = \"\";\n    clusterVisualization.innerHTML = \"\";\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload/`, {\n        method: \"POST\",\n        body: formData\n      });\n      const result = await response.json();\n\n      // Update progress bar to 100%\n      progressBar.style.width = \"100%\";\n      progressText.textContent = \"Processing Completed!\";\n\n      // Display result\n      if (result.game) {\n        resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n      } else {\n        resultContainer.innerHTML = `<p>${result.message || \"Processing complete.\"}</p>`;\n      }\n\n      // Fetch latest stats & visualization\n      fetchStats();\n      setTimeout(fetchClusterVisualization, 500);\n    } catch (error) {\n      console.error(\"Error uploading video:\", error);\n      progressText.textContent = \"Upload failed!\";\n      resultContainer.innerHTML = \"<p style='color: red;'>Error processing video.</p>\";\n    }\n  });\n\n  // Load statistics & visualization on page load\n  fetchStats();\n  fetchClusterVisualization();\n});","map":{"version":3,"names":["document","addEventListener","uploadForm","getElementById","videoInput","isLabeledCheckbox","gameNameInput","progressBar","progressText","resultContainer","statsContainer","clusterVisualization","API_BASE_URL","fetchStats","response","fetch","ok","Error","stats","json","statsHtml","game","count","Object","entries","innerHTML","error","console","fetchClusterVisualization","blob","imageUrl","URL","createObjectURL","event","preventDefault","files","length","alert","formData","FormData","append","checked","value","trim","style","width","textContent","method","body","result","message","setTimeout"],"sources":["/Users/raghavsomasundaram/gameplay-clustering/gameplay-clustering/src/GameplayClusteringUi.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n\n  const API_BASE_URL = \"http://127.0.0.1:8000\";\n\n  // Function to fetch cluster statistics\n  async function fetchStats() {\n      try {\n          const response = await fetch(`${API_BASE_URL}/stats`);\n          if (!response.ok) throw new Error(\"Failed to fetch statistics\");\n\n          const stats = await response.json();\n          let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n\n          for (const [game, count] of Object.entries(stats)) {\n              statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n          }\n\n          statsHtml += \"</ul>\";\n          statsContainer.innerHTML = statsHtml;\n      } catch (error) {\n          console.error(\"Error fetching stats:\", error);\n          statsContainer.innerHTML = \"<p style='color: red;'>Error loading statistics.</p>\";\n      }\n  }\n\n  // Function to fetch and display cluster visualization\n  async function fetchClusterVisualization() {\n      try {\n          const response = await fetch(`${API_BASE_URL}/visualize_clusters`);\n          if (!response.ok) throw new Error(\"Failed to load visualization\");\n\n          const blob = await response.blob();\n          const imageUrl = URL.createObjectURL(blob);\n\n          clusterVisualization.innerHTML = `\n              <h3>Updated Clusters:</h3>\n              <img src=\"${imageUrl}\" alt=\"Cluster Visualization\"\n              style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px; box-shadow: 0px 4px 6px rgba(0,0,0,0.2);\">`;\n      } catch (error) {\n          console.error(\"Error fetching cluster visualization:\", error);\n          clusterVisualization.innerHTML = \"<p style='color: red;'>Could not load cluster visualization.</p>\";\n      }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n      event.preventDefault();\n\n      if (!videoInput.files.length) {\n          alert(\"Please select a video file to upload.\");\n          return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"video\", videoInput.files[0]);\n      formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n      formData.append(\"game_name\", gameNameInput.value.trim());\n\n      // Reset UI elements\n      progressBar.style.width = \"0%\";\n      progressText.textContent = \"Uploading...\";\n      resultContainer.innerHTML = \"\";\n      clusterVisualization.innerHTML = \"\";\n\n      try {\n          const response = await fetch(`${API_BASE_URL}/upload/`, {\n              method: \"POST\",\n              body: formData,\n          });\n\n          const result = await response.json();\n\n          // Update progress bar to 100%\n          progressBar.style.width = \"100%\";\n          progressText.textContent = \"Processing Completed!\";\n\n          // Display result\n          if (result.game) {\n              resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n          } else {\n              resultContainer.innerHTML = `<p>${result.message || \"Processing complete.\"}</p>`;\n          }\n\n          // Fetch latest stats & visualization\n          fetchStats();\n          setTimeout(fetchClusterVisualization, 500);\n      } catch (error) {\n          console.error(\"Error uploading video:\", error);\n          progressText.textContent = \"Upload failed!\";\n          resultContainer.innerHTML = \"<p style='color: red;'>Error processing video.</p>\";\n      }\n  });\n\n  // Load statistics & visualization on page load\n  fetchStats();\n  fetchClusterVisualization();\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}