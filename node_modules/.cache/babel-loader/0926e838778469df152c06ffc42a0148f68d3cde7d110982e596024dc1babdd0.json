{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n\n  // Function to fetch and update statistics\n  async function fetchStats() {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/stats\");\n      const stats = await response.json();\n      let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n      for (const [game, count] of Object.entries(stats)) {\n        statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n      }\n      statsHtml += \"</ul>\";\n      statsContainer.innerHTML = statsHtml;\n    } catch (error) {\n      statsContainer.innerHTML = \"<p>Error fetching stats.</p>\";\n    }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n    event.preventDefault();\n    if (!videoInput.files.length) {\n      resultContainer.innerHTML = \"<p style='color: red;'>Please select a video file.</p>\";\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"video\", videoInput.files[0]);\n    formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n    formData.append(\"game_name\", gameNameInput.value);\n    progressBar.style.width = \"0%\";\n    progressText.textContent = \"Uploading...\";\n    resultContainer.innerHTML = \"\"; // Clear previous result\n    clusterVisualization.innerHTML = \"\"; // Clear previous visualization\n\n    // Simulate progress animation\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += 10;\n      progressBar.style.width = progress + \"%\";\n      if (progress >= 90) clearInterval(interval); // Stop at 90% until server response\n    }, 500);\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n        method: \"POST\",\n        body: formData\n      });\n      clearInterval(interval);\n      progressBar.style.width = \"100%\";\n      progressText.textContent = \"Processing Completed!\";\n      const result = await response.json();\n      if (result.game) {\n        resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n      } else {\n        resultContainer.innerHTML = `<p>${result.message}</p>`;\n      }\n\n      // Show cluster visualization if available\n      if (result.visualization) {\n        clusterVisualization.innerHTML = `<h3>Updated Clusters:</h3>\n                  <img src=\"http://127.0.0.1:8000/${result.visualization}\" alt=\"Cluster Visualization\" style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px;\">`;\n      }\n      fetchStats(); // Refresh statistics\n    } catch (error) {\n      clearInterval(interval);\n      progressBar.style.width = \"0%\";\n      progressText.textContent = \"Error!\";\n      resultContainer.innerHTML = \"<p style='color: red;'>Error processing video.</p>\";\n    }\n  });\n  fetchStats(); // Load stats on page load\n});","map":{"version":3,"names":["document","addEventListener","uploadForm","getElementById","videoInput","isLabeledCheckbox","gameNameInput","progressBar","progressText","resultContainer","statsContainer","clusterVisualization","fetchStats","response","fetch","stats","json","statsHtml","game","count","Object","entries","innerHTML","error","event","preventDefault","files","length","formData","FormData","append","checked","value","style","width","textContent","progress","interval","setInterval","clearInterval","method","body","result","message","visualization"],"sources":["/Users/raghavsomasundaram/gameplay-clustering/gameplay-clustering/src/GameplayClusteringUi.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n\n  // Function to fetch and update statistics\n  async function fetchStats() {\n      try {\n          const response = await fetch(\"http://127.0.0.1:8000/stats\");\n          const stats = await response.json();\n          let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n\n          for (const [game, count] of Object.entries(stats)) {\n              statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n          }\n\n          statsHtml += \"</ul>\";\n          statsContainer.innerHTML = statsHtml;\n      } catch (error) {\n          statsContainer.innerHTML = \"<p>Error fetching stats.</p>\";\n      }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n      event.preventDefault();\n\n      if (!videoInput.files.length) {\n          resultContainer.innerHTML = \"<p style='color: red;'>Please select a video file.</p>\";\n          return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"video\", videoInput.files[0]);\n      formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n      formData.append(\"game_name\", gameNameInput.value);\n\n      progressBar.style.width = \"0%\";\n      progressText.textContent = \"Uploading...\";\n      resultContainer.innerHTML = \"\"; // Clear previous result\n      clusterVisualization.innerHTML = \"\"; // Clear previous visualization\n\n      // Simulate progress animation\n      let progress = 0;\n      const interval = setInterval(() => {\n          progress += 10;\n          progressBar.style.width = progress + \"%\";\n          if (progress >= 90) clearInterval(interval); // Stop at 90% until server response\n      }, 500);\n\n      try {\n          const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n              method: \"POST\",\n              body: formData,\n          });\n\n          clearInterval(interval);\n          progressBar.style.width = \"100%\";\n          progressText.textContent = \"Processing Completed!\";\n\n          const result = await response.json();\n\n          if (result.game) {\n              resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n          } else {\n              resultContainer.innerHTML = `<p>${result.message}</p>`;\n          }\n\n          // Show cluster visualization if available\n          if (result.visualization) {\n              clusterVisualization.innerHTML = `<h3>Updated Clusters:</h3>\n                  <img src=\"http://127.0.0.1:8000/${result.visualization}\" alt=\"Cluster Visualization\" style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px;\">`;\n          }\n\n          fetchStats(); // Refresh statistics\n      } catch (error) {\n          clearInterval(interval);\n          progressBar.style.width = \"0%\";\n          progressText.textContent = \"Error!\";\n          resultContainer.innerHTML = \"<p style='color: red;'>Error processing video.</p>\";\n      }\n  });\n\n  fetchStats(); // Load stats on page load\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}