{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n\n  // Function to fetch statistics\n  async function fetchStats() {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/stats\");\n      const stats = await response.json();\n      let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n      for (const [game, count] of Object.entries(stats)) {\n        statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n      }\n      statsHtml += \"</ul>\";\n      statsContainer.innerHTML = statsHtml;\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      statsContainer.innerHTML = \"<p>Error loading statistics.</p>\";\n    }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append(\"video\", videoInput.files[0]);\n    formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n    formData.append(\"game_name\", gameNameInput.value);\n\n    // Reset UI elements\n    progressBar.style.width = \"0%\";\n    progressText.textContent = \"Uploading...\";\n    resultContainer.innerHTML = \"\";\n    clusterVisualization.innerHTML = \"\";\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n        method: \"POST\",\n        body: formData\n      });\n      const result = await response.json();\n\n      // Update progress bar to 100%\n      progressBar.style.width = \"100%\";\n      progressText.textContent = \"Processing Completed!\";\n\n      // Display result\n      if (result.game) {\n        resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n      } else {\n        resultContainer.innerHTML = `<p>${result.message}</p>`;\n      }\n\n      // Fetch latest stats\n      fetchStats();\n\n      // Fetch and display cluster visualization\n      setTimeout(fetchClusterVisualization, 500);\n    } catch (error) {\n      console.error(\"Error uploading video:\", error);\n      progressText.textContent = \"Upload failed!\";\n      resultContainer.innerHTML = \"<p>Error processing video.</p>\";\n    }\n  });\n\n  // Function to fetch cluster visualization\n  async function fetchClusterVisualization() {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/visualize_clusters\");\n      if (!response.ok) throw new Error(\"Failed to load visualization\");\n      const imageUrl = await response.text(); // URL of the visualization image\n\n      if (clusterVisualization) {\n        clusterVisualization.innerHTML = `<h3>Updated Clusters:</h3>\n                  <img src=\"http://127.0.0.1:8000/${imageUrl}\" alt=\"Cluster Visualization\"\n                  style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px;\">`;\n      }\n    } catch (error) {\n      console.error(\"Error fetching cluster visualization:\", error);\n      clusterVisualization.innerHTML = \"<p>Could not load cluster visualization.</p>\";\n    }\n  }\n\n  // Load statistics on page load\n  fetchStats();\n});","map":{"version":3,"names":["document","addEventListener","uploadForm","getElementById","videoInput","isLabeledCheckbox","gameNameInput","progressBar","progressText","resultContainer","statsContainer","clusterVisualization","fetchStats","response","fetch","stats","json","statsHtml","game","count","Object","entries","innerHTML","error","console","event","preventDefault","formData","FormData","append","files","checked","value","style","width","textContent","method","body","result","message","setTimeout","fetchClusterVisualization","ok","Error","imageUrl","text"],"sources":["/Users/raghavsomasundaram/gameplay-clustering/gameplay-clustering/src/GameplayClusteringUi.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  const uploadForm = document.getElementById(\"uploadForm\");\n  const videoInput = document.getElementById(\"videoInput\");\n  const isLabeledCheckbox = document.getElementById(\"isLabeled\");\n  const gameNameInput = document.getElementById(\"gameName\");\n  const progressBar = document.getElementById(\"progressBar\");\n  const progressText = document.getElementById(\"progressText\");\n  const resultContainer = document.getElementById(\"resultContainer\");\n  const statsContainer = document.getElementById(\"statsContainer\");\n  const clusterVisualization = document.getElementById(\"clusterVisualization\");\n\n  // Function to fetch statistics\n  async function fetchStats() {\n      try {\n          const response = await fetch(\"http://127.0.0.1:8000/stats\");\n          const stats = await response.json();\n          let statsHtml = \"<h3>Cluster Statistics</h3><ul>\";\n\n          for (const [game, count] of Object.entries(stats)) {\n              statsHtml += `<li><strong>${game}</strong>: ${count} frames</li>`;\n          }\n\n          statsHtml += \"</ul>\";\n          statsContainer.innerHTML = statsHtml;\n      } catch (error) {\n          console.error(\"Error fetching stats:\", error);\n          statsContainer.innerHTML = \"<p>Error loading statistics.</p>\";\n      }\n  }\n\n  // Upload video function\n  uploadForm.addEventListener(\"submit\", async function (event) {\n      event.preventDefault();\n\n      const formData = new FormData();\n      formData.append(\"video\", videoInput.files[0]);\n      formData.append(\"is_labeled\", isLabeledCheckbox.checked);\n      formData.append(\"game_name\", gameNameInput.value);\n\n      // Reset UI elements\n      progressBar.style.width = \"0%\";\n      progressText.textContent = \"Uploading...\";\n      resultContainer.innerHTML = \"\";\n      clusterVisualization.innerHTML = \"\";\n\n      try {\n          const response = await fetch(\"http://127.0.0.1:8000/upload/\", {\n              method: \"POST\",\n              body: formData,\n          });\n\n          const result = await response.json();\n\n          // Update progress bar to 100%\n          progressBar.style.width = \"100%\";\n          progressText.textContent = \"Processing Completed!\";\n\n          // Display result\n          if (result.game) {\n              resultContainer.innerHTML = `<h3>Predicted Game:</h3><p>${result.game}</p>`;\n          } else {\n              resultContainer.innerHTML = `<p>${result.message}</p>`;\n          }\n\n          // Fetch latest stats\n          fetchStats();\n\n          // Fetch and display cluster visualization\n          setTimeout(fetchClusterVisualization, 500);\n      } catch (error) {\n          console.error(\"Error uploading video:\", error);\n          progressText.textContent = \"Upload failed!\";\n          resultContainer.innerHTML = \"<p>Error processing video.</p>\";\n      }\n  });\n\n  // Function to fetch cluster visualization\n  async function fetchClusterVisualization() {\n      try {\n          const response = await fetch(\"http://127.0.0.1:8000/visualize_clusters\");\n          if (!response.ok) throw new Error(\"Failed to load visualization\");\n\n          const imageUrl = await response.text(); // URL of the visualization image\n\n          if (clusterVisualization) {\n              clusterVisualization.innerHTML = `<h3>Updated Clusters:</h3>\n                  <img src=\"http://127.0.0.1:8000/${imageUrl}\" alt=\"Cluster Visualization\"\n                  style=\"max-width: 100%; border: 1px solid #ccc; border-radius: 8px;\">`;\n          }\n      } catch (error) {\n          console.error(\"Error fetching cluster visualization:\", error);\n          clusterVisualization.innerHTML = \"<p>Could not load cluster visualization.</p>\";\n      }\n  }\n\n  // Load statistics on page load\n  fetchStats();\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}